let { tap, hold, ..} = import "fak/keycode.ncl" in

# unified taps
let tap' = {
  # none
  none = tap.none,
  # reg kc
  A = tap.reg.kc.A,
  B = tap.reg.kc.B,
  C = tap.reg.kc.C,
  D = tap.reg.kc.D,
  E = tap.reg.kc.E,
  F = tap.reg.kc.F,
  G = tap.reg.kc.G,
  H = tap.reg.kc.H,
  I = tap.reg.kc.I,
  J = tap.reg.kc.J,
  K = tap.reg.kc.K,
  L = tap.reg.kc.L,
  M = tap.reg.kc.M,
  N = tap.reg.kc.N,
  O = tap.reg.kc.O,
  P = tap.reg.kc.P,
  Q = tap.reg.kc.Q,
  R = tap.reg.kc.R,
  S = tap.reg.kc.S,
  T = tap.reg.kc.T,
  U = tap.reg.kc.U,
  V = tap.reg.kc.V,
  W = tap.reg.kc.W,
  X = tap.reg.kc.X,
  Y = tap.reg.kc.Y,
  Z = tap.reg.kc.Z,
  N1 = tap.reg.kc.N1,
  N2 = tap.reg.kc.N2,
  N3 = tap.reg.kc.N3,
  N4 = tap.reg.kc.N4,
  N5 = tap.reg.kc.N5,
  N6 = tap.reg.kc.N6,
  N7 = tap.reg.kc.N7,
  N8 = tap.reg.kc.N8,
  N9 = tap.reg.kc.N9,
  N0 = tap.reg.kc.N0,
  ENTER = tap.reg.kc.ENTER,
  ESCAPE = tap.reg.kc.ESCAPE,
  BACKSPACE = tap.reg.kc.BACKSPACE,
  TAB = tap.reg.kc.TAB,
  SPACE = tap.reg.kc.SPACE,
  MINUS = tap.reg.kc.MINUS,
  EQUAL = tap.reg.kc.EQUAL,
  LEFT_BRACKET = tap.reg.kc.LEFT_BRACKET,
  RIGHT_BRACKET = tap.reg.kc.RIGHT_BRACKET,
  BACKSLASH = tap.reg.kc.BACKSLASH,
  NONUS_HASH = tap.reg.kc.NONUS_HASH,
  SEMICOLON = tap.reg.kc.SEMICOLON,
  QUOTE = tap.reg.kc.QUOTE,
  GRAVE = tap.reg.kc.GRAVE,
  COMMA = tap.reg.kc.COMMA,
  DOT = tap.reg.kc.DOT,
  SLASH = tap.reg.kc.SLASH,
  CAPS_LOCK = tap.reg.kc.CAPS_LOCK,
  F1 = tap.reg.kc.F1,
  F2 = tap.reg.kc.F2,
  F3 = tap.reg.kc.F3,
  F4 = tap.reg.kc.F4,
  F5 = tap.reg.kc.F5,
  F6 = tap.reg.kc.F6,
  F7 = tap.reg.kc.F7,
  F8 = tap.reg.kc.F8,
  F9 = tap.reg.kc.F9,
  F10 = tap.reg.kc.F10,
  F11 = tap.reg.kc.F11,
  F12 = tap.reg.kc.F12,
  PRINT_SCREEN = tap.reg.kc.PRINT_SCREEN,
  SCROLL_LOCK = tap.reg.kc.SCROLL_LOCK,
  PAUSE = tap.reg.kc.PAUSE,
  INSERT = tap.reg.kc.INSERT,
  HOME = tap.reg.kc.HOME,
  PAGE_UP = tap.reg.kc.PAGE_UP,
  DELETE = tap.reg.kc.DELETE,
  END = tap.reg.kc.END,
  PAGE_DOWN = tap.reg.kc.PAGE_DOWN,
  RIGHT = tap.reg.kc.RIGHT,
  LEFT = tap.reg.kc.LEFT,
  DOWN = tap.reg.kc.DOWN,
  UP = tap.reg.kc.UP,
  NUM_LOCK = tap.reg.kc.NUM_LOCK,
  KP_SLASH = tap.reg.kc.KP_SLASH,
  KP_ASTERISK = tap.reg.kc.KP_ASTERISK,
  KP_MINUS = tap.reg.kc.KP_MINUS,
  KP_PLUS = tap.reg.kc.KP_PLUS,
  KP_ENTER = tap.reg.kc.KP_ENTER,
  KP_1 = tap.reg.kc.KP_1,
  KP_2 = tap.reg.kc.KP_2,
  KP_3 = tap.reg.kc.KP_3,
  KP_4 = tap.reg.kc.KP_4,
  KP_5 = tap.reg.kc.KP_5,
  KP_6 = tap.reg.kc.KP_6,
  KP_7 = tap.reg.kc.KP_7,
  KP_8 = tap.reg.kc.KP_8,
  KP_9 = tap.reg.kc.KP_9,
  KP_0 = tap.reg.kc.KP_0,
  KP_DOT = tap.reg.kc.KP_DOT,
  NONUS_BACKSLASH = tap.reg.kc.NONUS_BACKSLASH,
  APPLICATION = tap.reg.kc.APPLICATION,
  KB_POWER = tap.reg.kc.KB_POWER,
  KP_EQUAL = tap.reg.kc.KP_EQUAL,
  F13 = tap.reg.kc.F13,
  F14 = tap.reg.kc.F14,
  F15 = tap.reg.kc.F15,
  F16 = tap.reg.kc.F16,
  F17 = tap.reg.kc.F17,
  F18 = tap.reg.kc.F18,
  F19 = tap.reg.kc.F19,
  F20 = tap.reg.kc.F20,
  F21 = tap.reg.kc.F21,
  F22 = tap.reg.kc.F22,
  F23 = tap.reg.kc.F23,
  F24 = tap.reg.kc.F24,
  EXECUTE = tap.reg.kc.EXECUTE,
  HELP = tap.reg.kc.HELP,
  MENU = tap.reg.kc.MENU,
  SELECT = tap.reg.kc.SELECT,
  STOP = tap.reg.kc.STOP,
  AGAIN = tap.reg.kc.AGAIN,
  UNDO = tap.reg.kc.UNDO,
  CUT = tap.reg.kc.CUT,
  COPY = tap.reg.kc.COPY,
  PASTE = tap.reg.kc.PASTE,
  FIND = tap.reg.kc.FIND,
  KB_MUTE = tap.reg.kc.KB_MUTE,
  KB_VOLUME_UP = tap.reg.kc.KB_VOLUME_UP,
  KB_VOLUME_DOWN = tap.reg.kc.KB_VOLUME_DOWN,
  LOCKING_CAPS_LOCK = tap.reg.kc.LOCKING_CAPS_LOCK,
  LOCKING_NUM_LOCK = tap.reg.kc.LOCKING_NUM_LOCK,
  LOCKING_SCROLL_LOCK = tap.reg.kc.LOCKING_SCROLL_LOCK,
  KP_COMMA = tap.reg.kc.KP_COMMA,
  KP_EQUAL_AS400 = tap.reg.kc.KP_EQUAL_AS400,
  INTERNATIONAL_1 = tap.reg.kc.INTERNATIONAL_1,
  INTERNATIONAL_2 = tap.reg.kc.INTERNATIONAL_2,
  INTERNATIONAL_3 = tap.reg.kc.INTERNATIONAL_3,
  INTERNATIONAL_4 = tap.reg.kc.INTERNATIONAL_4,
  INTERNATIONAL_5 = tap.reg.kc.INTERNATIONAL_5,
  INTERNATIONAL_6 = tap.reg.kc.INTERNATIONAL_6,
  INTERNATIONAL_7 = tap.reg.kc.INTERNATIONAL_7,
  INTERNATIONAL_8 = tap.reg.kc.INTERNATIONAL_8,
  INTERNATIONAL_9 = tap.reg.kc.INTERNATIONAL_9,
  LANGUAGE_1 = tap.reg.kc.LANGUAGE_1,
  LANGUAGE_2 = tap.reg.kc.LANGUAGE_2,
  LANGUAGE_3 = tap.reg.kc.LANGUAGE_3,
  LANGUAGE_4 = tap.reg.kc.LANGUAGE_4,
  LANGUAGE_5 = tap.reg.kc.LANGUAGE_5,
  LANGUAGE_6 = tap.reg.kc.LANGUAGE_6,
  LANGUAGE_7 = tap.reg.kc.LANGUAGE_7,
  LANGUAGE_8 = tap.reg.kc.LANGUAGE_8,
  LANGUAGE_9 = tap.reg.kc.LANGUAGE_9,
  ALTERNATE_ERASE = tap.reg.kc.ALTERNATE_ERASE,
  SYSTEM_REQUEST = tap.reg.kc.SYSTEM_REQUEST,
  CANCEL = tap.reg.kc.CANCEL,
  CLEAR = tap.reg.kc.CLEAR,
  PRIOR = tap.reg.kc.PRIOR,
  RETURN = tap.reg.kc.RETURN,
  SEPARATOR = tap.reg.kc.SEPARATOR,
  # reg mod
  lctl = tap.reg.mod.lctl,
  lsft = tap.reg.mod.lsft,
  lalt = tap.reg.mod.lalt,
  lgui = tap.reg.mod.lgui,
  rctl = tap.reg.mod.rctl,
  rsft = tap.reg.mod.rsft,
  ralt = tap.reg.mod.ralt,
  rgui = tap.reg.mod.rgui,
  # reg ks
  CIRC = tap.reg.ks.CIRC,
  DLR  = tap.reg.ks.DLR,
  TILD = tap.reg.ks.TILD,
  PIPE = tap.reg.ks.PIPE,
  PERC = tap.reg.ks.PERC,
  AMPR = tap.reg.ks.AMPR,
  ASTR = tap.reg.ks.ASTR,
  HASH = tap.reg.ks.HASH,
  AT   = tap.reg.ks.AT,
  DQUO = tap.reg.ks.DQUO,
  LCBR = tap.reg.ks.LCBR,
  RCBR = tap.reg.ks.RCBR,
  LPRN = tap.reg.ks.LPRN,
  RPRN = tap.reg.ks.RPRN,
  LABK = tap.reg.ks.LABK,
  RABK = tap.reg.ks.RABK,
  QUES = tap.reg.ks.QUES,
  UNDS = tap.reg.ks.UNDS,
  PLUS = tap.reg.ks.PLUS,
  COLN = tap.reg.ks.COLN,
  EXLM = tap.reg.ks.EXLM,
  # sticky mod
  sklc = tap.sticky.mod.lctl,
  skls = tap.sticky.mod.lsft,
  skla = tap.sticky.mod.lalt,
  sklg = tap.sticky.mod.lgui,
  skrc = tap.sticky.mod.rctl,
  skrs = tap.sticky.mod.rsft,
  skra = tap.sticky.mod.ralt,
  skrg = tap.sticky.mod.rgui,
  # sticky layer
  skDF = tap.sticky.layer.DF,
  skTG = tap.sticky.layer.TG,
  skTO = tap.sticky.layer.TO,
  # layer
  DF = tap.layer.DF,
  TG = tap.layer.TG,
  TO = tap.layer.TO,
  # custom fak
  REST = tap.custom.fak.REST,
  BOOT = tap.custom.fak.BOOT,
  CWON = tap.custom.fak.CWON,
  CWOF = tap.custom.fak.CWOF,
  CWTG = tap.custom.fak.CWTG,
  REP  = tap.custom.fak.REP,
  # custom media
  PLAY = tap.custom.media.PLAY,
  MUTE = tap.custom.media.MUTE,
  VOLU = tap.custom.media.VOLU,
  VOLD = tap.custom.media.VOLD,
  NEXT = tap.custom.media.NEXT,
  PREV = tap.custom.media.PREV,
  # custom mouse
  BTN1 = tap.custom.mouse.BTN1,
  BTN2 = tap.custom.mouse.BTN2,
  BTN3 = tap.custom.mouse.BTN3,
  BTN4 = tap.custom.mouse.BTN4,
  BTN5 = tap.custom.mouse.BTN5,
  BTN6 = tap.custom.mouse.BTN6,
  BTN7 = tap.custom.mouse.BTN7,
  BTN8 = tap.custom.mouse.BTN8,
  RGHT = tap.custom.mouse.RGHT,
  LEFT = tap.custom.mouse.LEFT,
  DOWN = tap.custom.mouse.DOWN,
  UP   = tap.custom.mouse.UP,
  WH_U = tap.custom.mouse.WH_U,
  WH_D = tap.custom.mouse.WH_D,
  # tlex
  tlex = tap.tlex,
  # trans
  trans = tap.trans,
} in

# unified holds
let hold' = {
  none = hold.none,
  behavior = hold.reg.behavior,
  layer = hold.reg.layer,
  lctl = hold.reg.mod.lctl,
  lsft = hold.reg.mod.lsft,
  lalt = hold.reg.mod.lalt,
  lgui = hold.reg.mod.lgui,
  rctl = hold.reg.mod.rctl,
  rsft = hold.reg.mod.rsft,
  ralt = hold.reg.mod.ralt,
  rgui = hold.reg.mod.rgui,
  nop  = hold.nop,
  tlex = hold.tlex,
  trans = hold.trans,
} in

# explicit default tap-hold
let default_tap_hold_behavior = {
  timeout_decision = 'hold,
  timeout_ms = 200,
  eager_decision = 'none,
  # not possible to make explicit w/out knowing layout
  # key_interrupts = std.array.replicate key_count {},
  quick_tap_ms = 0,
  quick_tap_interrupt_ms = 0,
  global_quick_tap_ms = 0,
  global_quick_tap_ignore_consecutive = false,
} in

let holdtap' = fun hold tap => tap & hold & default_tap_hold_behavior in

{
  t = tap',
  h = hold',
  ht = holdtap',
}
